import streamlit as st
import yfinance as yf
import pandas as pd
import plotly.graph_objs as go
from datetime import datetime, timedelta

# -------------------------------
# Streamlit UI
# -------------------------------
st.set_page_config(page_title="Real-Time Stock Market Dashboard", layout="wide")

st.title("ðŸ“ˆ Real-Time Stock Market Dashboard")

# Sidebar inputs
st.sidebar.header("Stock Settings")
ticker = st.sidebar.text_input("Enter Stock Symbol (e.g. AAPL, TSLA, INFY.NS):", "AAPL")
days = st.sidebar.slider("Number of past days to fetch:", 10, 365, 90)
interval = st.sidebar.selectbox("Interval", ["1m", "5m", "15m", "30m", "1h", "1d"])

# -------------------------------
# Fetch Data
# -------------------------------
end_date = datetime.now()
start_date = end_date - timedelta(days=days)

@st.cache_data
def load_data(ticker, start, end, interval):
    df = yf.download(ticker, start=start, end=end, interval=interval)
    df.reset_index(inplace=True)
    return df

data = load_data(ticker, start_date, end_date, interval)

# -------------------------------
# Display Data
# -------------------------------
st.subheader(f"Showing data for {ticker}")
st.write(data.tail())

# -------------------------------
# Candlestick Chart
# -------------------------------
fig = go.Figure(data=[go.Candlestick(
    x=data['Datetime'] if 'Datetime' in data.columns else data['Date'],
    open=data['Open'],
    high=data['High'],
    low=data['Low'],
    close=data['Close'],
    name="Candlestick"
)])

fig.update_layout(
    title=f"{ticker} Stock Price",
    xaxis_title="Date",
    yaxis_title="Price (USD)",
    template="plotly_dark",
    xaxis_rangeslider_visible=True
)

st.plotly_chart(fig, use_container_width=True)

# -------------------------------
# Moving Averages
# -------------------------------
st.subheader("Moving Averages")
ma_days = st.sidebar.multiselect("Select Moving Averages (days):", [10, 20, 50, 100, 200], [20, 50])

ma_fig = go.Figure()
ma_fig.add_trace(go.Scatter(x=data.index, y=data['Close'], mode='lines', name='Close Price'))

for ma in ma_days:
    data[f"MA_{ma}"] = data['Close'].rolling(ma).mean()
    ma_fig.add_trace(go.Scatter(x=data.index, y=data[f"MA_{ma}"], mode='lines', name=f"{ma}-Day MA"))

ma_fig.update_layout(title=f"{ticker} Moving Averages", template="plotly_dark")
st.plotly_chart(ma_fig, use_container_width=True)

# -------------------------------
# Volume
# -------------------------------
st.subheader("Trading Volume")
vol_fig = go.Figure()
vol_fig.add_trace(go.Bar(x=data.index, y=data['Volume'], name="Volume"))
vol_fig.update_layout(title=f"{ticker} Trading Volume", template="plotly_dark")
st.plotly_chart(vol_fig, use_container_width=True)

st.success("âœ… Dashboard Ready")
